1. 미래에 대한 대비(소프트웨어 설계) => 모든 것은 변한다
2. APP 변화에 대한 대응

1.1 [관심사]의 분리
-UserDao 관심
 -- 연결작업
 -- 데이터 작업을 하는 함수에 관심
 -- 자원해제(연결객체 등)
 문제점)
 --예외에 대한 처리 코드 
 --add 함수 (데이터 insert 관심) => DB연결에 대한 관심사
 해결방안) 중복된 관심사를 하나의 관심사로 모으자
         private Connection getConnection() => 리펙토링 작업
         -기존의 코드를 외부 동작방식에는 변화가 없고
         -내부 구조를 변경해서 재구성하는 기술

         
 1.2 
 요구사항
 제품 판매시 고객의 요구와 회사내부의 요구 사항
 1. UserDAO 의 코드를 노출하고 싶지 않다
 2. N사 와 D사 DB연결 방법은 다르다
 
 해결방법)
 1. 상속 : UserDAO 상속하는 클래스를 만들고
             그 클래스 내부에서 각 벤더의 연결 구현
             
 1.1 기존의 코드 (add 와 get 그대로 유지)
      변경이 되는 코드 (getconnection 함수 내부 코드)
    > 추상클래스  (상속을 목적으로)
    UserDAO 추상클래스  > N사와 D사 상속해서 사용   
 
 
 문제점)
 1. 상속 (단일상속을 원칙으로 하고 다중상속을 지원하지 않는다) 제기
 2. 상속관계 (부모클래스 와 자식클래스) 관계가 밀접하다
    (부모의 클래스의 변화의 의한 자식클래스의 변화가 불가피하다)
    
 
 >상속관계를 파괴하자
 -> DB연결을 담당하는 별도의 클래스를 생성하자
 
 
 >작업
 simpleConnectionMaker 클래스 생성
 
 simpleConnectionMaker 생성된 클래스를
 UserDao 클래스가 사용하도록 코드 변경
 
 
 그럼 과연 
 N사와 D사에게 판매는 어떻게 하면 되나요
 simpleConnectionMaker 각 벤더에게 노출 시기면 됩니다
 
 >문제점 (simpleConnectionMaker 분리)
 1. simpleConnectionMaker 클래스의 확장성 (연결 함수명...)
    확장성 > UserDao 녀석이 simpleConnectionMaker [의존]
    
 해결방법) 위 문제의 해결방법은 인터페이스 (다형성)
 
 
 
 
 
 
   